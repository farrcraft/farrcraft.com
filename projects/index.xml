<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on farrcraft.com</title><link>https://farrcraft.com/projects/</link><description>Recent content in Projects on farrcraft.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://farrcraft.com/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>mystery-basket-generator</title><link>https://farrcraft.com/projects/mystery-basket-generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farrcraft.com/projects/mystery-basket-generator/</guid><description>The original basil project was a grand vision that never existed beyond the initial prototype phase. This reincarnation is a stripped down weekend project version is a simple randomized ingredient mystery basket generator inspired by shows such as the Food Network’s Chopped series. It is a Node.js application built using the Express framework and MongoDB data store. I also whipped up a quick PHP version for generating ingredient lists for homebrew beer recipes as a later version.</description></item><item><title>NoteKeeper</title><link>https://farrcraft.com/projects/notekeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farrcraft.com/projects/notekeeper/</guid><description>NoteKeeper was an experiment in creating a notekeeping application with a focus on privacy. It was designed as an Electron application with a backend written in Go. The frontend was built with Typescript, React, and Electron. It communicated with the backend using Google Protobufs.</description></item><item><title>Odyssey</title><link>https://farrcraft.com/projects/odyssey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farrcraft.com/projects/odyssey/</guid><description>Odyssey is my game engine development playground. It is written in modern C++. While there is some functional overlap with Vertical 3D, I wanted a green space to experiment. I originally learned C++ in the mid-90&amp;rsquo;s which informs a lot of the older Vertical 3D code and its patterns. It wasn&amp;rsquo;t designed primarily as a game engine either.</description></item><item><title>rpi-ferment</title><link>https://farrcraft.com/projects/rpi-ferment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farrcraft.com/projects/rpi-ferment/</guid><description>v1 This is a beer fermentation temperature monitoring, logging, and control application suite built on the Raspberry Pi platform. There are a series of blog posts detailing the entire project. The software aspect comprises two Node.js applications written in CoffeeScript. The backend server interacts with the Pi’s GPIO, capturing temperature data from any number of configured DS18B20 temperature sensors and logging them into graphite via statsd. It also exposes a RESTful API built using Express and Mongoose for managing fermentation profiles.</description></item><item><title>Shot Capture</title><link>https://farrcraft.com/projects/shot-capture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farrcraft.com/projects/shot-capture/</guid><description>Shot Capture is a tool designed to remotely control a DSLR camera and record single hi-resolution RAW images to disk. It is meant to be used in conjunction with a motion controller rig. The recorded images can later be processed and combined to create HD video sequences. Github Repo</description></item><item><title>vertical3D</title><link>https://farrcraft.com/projects/vertical3d/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farrcraft.com/projects/vertical3d/</guid><description>The Vertical3D project is a collection of C++ application libaries used across my various 3D application projects. There are libraries for image reading &amp;amp; writing (PNG, TGA, BMP, JPEG), font rendering (bmfont, FreeType), OpenAL audio, basic 3D data types, an event framework, OpenGL rendering helpers, and backend window drivers for SDL, SDL2, FLTK, and SMFL.
Voxel Voxel is a small application created for the purposes of testing out voxel-based random world generation and manipulation a la Minecraft.</description></item></channel></rss>